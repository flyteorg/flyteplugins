// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import core "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"
import events "github.com/lyft/flyteplugins/go/tasks/v1/events"
import flytek8s "github.com/lyft/flyteplugins/go/tasks/flytek8s"
import mock "github.com/stretchr/testify/mock"
import types "github.com/lyft/flyteplugins/go/tasks/v1/types"

// K8sResourceHandler is an autogenerated mock type for the K8sResourceHandler type
type K8sResourceHandler struct {
	mock.Mock
}

// BuildIdentityResource provides a mock function with given fields: ctx, taskCtx
func (_m *K8sResourceHandler) BuildIdentityResource(ctx context.Context, taskCtx types.TaskContext) (flytek8s.K8sResource, error) {
	ret := _m.Called(ctx, taskCtx)

	var r0 flytek8s.K8sResource
	if rf, ok := ret.Get(0).(func(context.Context, types.TaskContext) flytek8s.K8sResource); ok {
		r0 = rf(ctx, taskCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flytek8s.K8sResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.TaskContext) error); ok {
		r1 = rf(ctx, taskCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildResource provides a mock function with given fields: ctx, taskCtx, task, inputs
func (_m *K8sResourceHandler) BuildResource(ctx context.Context, taskCtx types.TaskContext, task *core.TaskTemplate, inputs *core.LiteralMap) (flytek8s.K8sResource, error) {
	ret := _m.Called(ctx, taskCtx, task, inputs)

	var r0 flytek8s.K8sResource
	if rf, ok := ret.Get(0).(func(context.Context, types.TaskContext, *core.TaskTemplate, *core.LiteralMap) flytek8s.K8sResource); ok {
		r0 = rf(ctx, taskCtx, task, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flytek8s.K8sResource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.TaskContext, *core.TaskTemplate, *core.LiteralMap) error); ok {
		r1 = rf(ctx, taskCtx, task, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskStatus provides a mock function with given fields: ctx, taskCtx, resource
func (_m *K8sResourceHandler) GetTaskStatus(ctx context.Context, taskCtx types.TaskContext, resource flytek8s.K8sResource) (types.TaskStatus, *events.TaskEventInfo, error) {
	ret := _m.Called(ctx, taskCtx, resource)

	var r0 types.TaskStatus
	if rf, ok := ret.Get(0).(func(context.Context, types.TaskContext, flytek8s.K8sResource) types.TaskStatus); ok {
		r0 = rf(ctx, taskCtx, resource)
	} else {
		r0 = ret.Get(0).(types.TaskStatus)
	}

	var r1 *events.TaskEventInfo
	if rf, ok := ret.Get(1).(func(context.Context, types.TaskContext, flytek8s.K8sResource) *events.TaskEventInfo); ok {
		r1 = rf(ctx, taskCtx, resource)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*events.TaskEventInfo)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, types.TaskContext, flytek8s.K8sResource) error); ok {
		r2 = rf(ctx, taskCtx, resource)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

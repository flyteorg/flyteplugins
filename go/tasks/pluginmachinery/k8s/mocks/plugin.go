// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import core "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/core"
import k8s "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/k8s"
import mock "github.com/stretchr/testify/mock"

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// BuildIdentityResource provides a mock function with given fields: ctx, taskCtx
func (_m *Plugin) BuildIdentityResource(ctx context.Context, taskCtx core.TaskExecutionMetadata) (k8s.Resource, error) {
	ret := _m.Called(ctx, taskCtx)

	var r0 k8s.Resource
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionMetadata) k8s.Resource); ok {
		r0 = rf(ctx, taskCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(k8s.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.TaskExecutionMetadata) error); ok {
		r1 = rf(ctx, taskCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildResource provides a mock function with given fields: ctx, taskCtx
func (_m *Plugin) BuildResource(ctx context.Context, taskCtx core.TaskExecutionContext) (k8s.Resource, error) {
	ret := _m.Called(ctx, taskCtx)

	var r0 k8s.Resource
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionContext) k8s.Resource); ok {
		r0 = rf(ctx, taskCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(k8s.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.TaskExecutionContext) error); ok {
		r1 = rf(ctx, taskCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskPhase provides a mock function with given fields: ctx, pluginContext, resource
func (_m *Plugin) GetTaskPhase(ctx context.Context, pluginContext k8s.PluginContext, resource k8s.Resource) (core.PhaseInfo, error) {
	ret := _m.Called(ctx, pluginContext, resource)

	var r0 core.PhaseInfo
	if rf, ok := ret.Get(0).(func(context.Context, k8s.PluginContext, k8s.Resource) core.PhaseInfo); ok {
		r0 = rf(ctx, pluginContext, resource)
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, k8s.PluginContext, k8s.Resource) error); ok {
		r1 = rf(ctx, pluginContext, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	core "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/core"

	k8s "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/k8s"

	mock "github.com/stretchr/testify/mock"
)

// PluginAbortOverride is an autogenerated mock type for the PluginAbortOverride type
type PluginAbortOverride struct {
	mock.Mock
}

type PluginAbortOverride_OnAbort struct {
	*mock.Call
}

func (_m PluginAbortOverride_OnAbort) Return(behavior k8s.AbortBehavior, err error) *PluginAbortOverride_OnAbort {
	return &PluginAbortOverride_OnAbort{Call: _m.Call.Return(behavior, err)}
}

func (_m *PluginAbortOverride) OnOnAbort(ctx context.Context, tCtx core.TaskExecutionContext, resource client.Object) *PluginAbortOverride_OnAbort {
	c_call := _m.On("OnAbort", ctx, tCtx, resource)
	return &PluginAbortOverride_OnAbort{Call: c_call}
}

func (_m *PluginAbortOverride) OnOnAbortMatch(matchers ...interface{}) *PluginAbortOverride_OnAbort {
	c_call := _m.On("OnAbort", matchers...)
	return &PluginAbortOverride_OnAbort{Call: c_call}
}

// OnAbort provides a mock function with given fields: ctx, tCtx, resource
func (_m *PluginAbortOverride) OnAbort(ctx context.Context, tCtx core.TaskExecutionContext, resource client.Object) (k8s.AbortBehavior, error) {
	ret := _m.Called(ctx, tCtx, resource)

	var r0 k8s.AbortBehavior
	if rf, ok := ret.Get(0).(func(context.Context, core.TaskExecutionContext, client.Object) k8s.AbortBehavior); ok {
		r0 = rf(ctx, tCtx, resource)
	} else {
		r0 = ret.Get(0).(k8s.AbortBehavior)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, core.TaskExecutionContext, client.Object) error); ok {
		r1 = rf(ctx, tCtx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by "enumer -type=ResourceCustomizationMode -trimprefix=ResourceCustomizationMode"; DO NOT EDIT.

package flytek8s

import (
	"fmt"
)

const _ResourceCustomizationModeName = "AssignResourcesMergeExistingResourcesEnsureExistingResourcesInRange"

var _ResourceCustomizationModeIndex = [...]uint8{0, 15, 37, 67}

func (i ResourceCustomizationMode) String() string {
	if i < 0 || i >= ResourceCustomizationMode(len(_ResourceCustomizationModeIndex)-1) {
		return fmt.Sprintf("ResourceCustomizationMode(%d)", i)
	}
	return _ResourceCustomizationModeName[_ResourceCustomizationModeIndex[i]:_ResourceCustomizationModeIndex[i+1]]
}

var _ResourceCustomizationModeValues = []ResourceCustomizationMode{0, 1, 2}

var _ResourceCustomizationModeNameToValueMap = map[string]ResourceCustomizationMode{
	_ResourceCustomizationModeName[0:15]:  0,
	_ResourceCustomizationModeName[15:37]: 1,
	_ResourceCustomizationModeName[37:67]: 2,
}

// ResourceCustomizationModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResourceCustomizationModeString(s string) (ResourceCustomizationMode, error) {
	if val, ok := _ResourceCustomizationModeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ResourceCustomizationMode values", s)
}

// ResourceCustomizationModeValues returns all values of the enum
func ResourceCustomizationModeValues() []ResourceCustomizationMode {
	return _ResourceCustomizationModeValues
}

// IsAResourceCustomizationMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ResourceCustomizationMode) IsAResourceCustomizationMode() bool {
	for _, v := range _ResourceCustomizationModeValues {
		if i == v {
			return true
		}
	}
	return false
}

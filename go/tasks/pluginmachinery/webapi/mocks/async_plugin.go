// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	webapi "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/webapi"
)

// AsyncPlugin is an autogenerated mock type for the AsyncPlugin type
type AsyncPlugin struct {
	mock.Mock
}

type AsyncPlugin_Create struct {
	*mock.Call
}

func (_m AsyncPlugin_Create) Return(resourceMeta interface{}, optionalResource interface{}, err error) *AsyncPlugin_Create {
	return &AsyncPlugin_Create{Call: _m.Call.Return(resourceMeta, optionalResource, err)}
}

func (_m *AsyncPlugin) OnCreate(ctx context.Context, tCtx webapi.TaskExecutionContextReader) *AsyncPlugin_Create {
	c_call := _m.On("Create", ctx, tCtx)
	return &AsyncPlugin_Create{Call: c_call}
}

func (_m *AsyncPlugin) OnCreateMatch(matchers ...interface{}) *AsyncPlugin_Create {
	c_call := _m.On("Create", matchers...)
	return &AsyncPlugin_Create{Call: c_call}
}

// Create provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Create(ctx context.Context, tCtx webapi.TaskExecutionContextReader) (interface{}, interface{}, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContextReader) interface{}); ok {
		r0 = rf(ctx, tCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(context.Context, webapi.TaskExecutionContextReader) interface{}); ok {
		r1 = rf(ctx, tCtx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, webapi.TaskExecutionContextReader) error); ok {
		r2 = rf(ctx, tCtx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type AsyncPlugin_Delete struct {
	*mock.Call
}

func (_m AsyncPlugin_Delete) Return(_a0 error) *AsyncPlugin_Delete {
	return &AsyncPlugin_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncPlugin) OnDelete(ctx context.Context, tCtx webapi.DeleteContext) *AsyncPlugin_Delete {
	c_call := _m.On("Delete", ctx, tCtx)
	return &AsyncPlugin_Delete{Call: c_call}
}

func (_m *AsyncPlugin) OnDeleteMatch(matchers ...interface{}) *AsyncPlugin_Delete {
	c_call := _m.On("Delete", matchers...)
	return &AsyncPlugin_Delete{Call: c_call}
}

// Delete provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Delete(ctx context.Context, tCtx webapi.DeleteContext) error {
	ret := _m.Called(ctx, tCtx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, webapi.DeleteContext) error); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type AsyncPlugin_Get struct {
	*mock.Call
}

func (_m AsyncPlugin_Get) Return(latest interface{}, err error) *AsyncPlugin_Get {
	return &AsyncPlugin_Get{Call: _m.Call.Return(latest, err)}
}

func (_m *AsyncPlugin) OnGet(ctx context.Context, tCtx webapi.GetContext) *AsyncPlugin_Get {
	c_call := _m.On("Get", ctx, tCtx)
	return &AsyncPlugin_Get{Call: c_call}
}

func (_m *AsyncPlugin) OnGetMatch(matchers ...interface{}) *AsyncPlugin_Get {
	c_call := _m.On("Get", matchers...)
	return &AsyncPlugin_Get{Call: c_call}
}

// Get provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Get(ctx context.Context, tCtx webapi.GetContext) (interface{}, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, webapi.GetContext) interface{}); ok {
		r0 = rf(ctx, tCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, webapi.GetContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type AsyncPlugin_GetConfig struct {
	*mock.Call
}

func (_m AsyncPlugin_GetConfig) Return(_a0 webapi.PluginConfig) *AsyncPlugin_GetConfig {
	return &AsyncPlugin_GetConfig{Call: _m.Call.Return(_a0)}
}

func (_m *AsyncPlugin) OnGetConfig() *AsyncPlugin_GetConfig {
	c_call := _m.On("GetConfig")
	return &AsyncPlugin_GetConfig{Call: c_call}
}

func (_m *AsyncPlugin) OnGetConfigMatch(matchers ...interface{}) *AsyncPlugin_GetConfig {
	c_call := _m.On("GetConfig", matchers...)
	return &AsyncPlugin_GetConfig{Call: c_call}
}

// GetConfig provides a mock function with given fields:
func (_m *AsyncPlugin) GetConfig() webapi.PluginConfig {
	ret := _m.Called()

	var r0 webapi.PluginConfig
	if rf, ok := ret.Get(0).(func() webapi.PluginConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(webapi.PluginConfig)
	}

	return r0
}

type AsyncPlugin_ResourceRequirements struct {
	*mock.Call
}

func (_m AsyncPlugin_ResourceRequirements) Return(namespace core.ResourceNamespace, constraints core.ResourceConstraintsSpec, err error) *AsyncPlugin_ResourceRequirements {
	return &AsyncPlugin_ResourceRequirements{Call: _m.Call.Return(namespace, constraints, err)}
}

func (_m *AsyncPlugin) OnResourceRequirements(ctx context.Context, tCtx webapi.TaskExecutionContextReader) *AsyncPlugin_ResourceRequirements {
	c_call := _m.On("ResourceRequirements", ctx, tCtx)
	return &AsyncPlugin_ResourceRequirements{Call: c_call}
}

func (_m *AsyncPlugin) OnResourceRequirementsMatch(matchers ...interface{}) *AsyncPlugin_ResourceRequirements {
	c_call := _m.On("ResourceRequirements", matchers...)
	return &AsyncPlugin_ResourceRequirements{Call: c_call}
}

// ResourceRequirements provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) ResourceRequirements(ctx context.Context, tCtx webapi.TaskExecutionContextReader) (core.ResourceNamespace, core.ResourceConstraintsSpec, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 core.ResourceNamespace
	if rf, ok := ret.Get(0).(func(context.Context, webapi.TaskExecutionContextReader) core.ResourceNamespace); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.ResourceNamespace)
	}

	var r1 core.ResourceConstraintsSpec
	if rf, ok := ret.Get(1).(func(context.Context, webapi.TaskExecutionContextReader) core.ResourceConstraintsSpec); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Get(1).(core.ResourceConstraintsSpec)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, webapi.TaskExecutionContextReader) error); ok {
		r2 = rf(ctx, tCtx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type AsyncPlugin_Status struct {
	*mock.Call
}

func (_m AsyncPlugin_Status) Return(phase core.PhaseInfo, err error) *AsyncPlugin_Status {
	return &AsyncPlugin_Status{Call: _m.Call.Return(phase, err)}
}

func (_m *AsyncPlugin) OnStatus(ctx context.Context, tCtx webapi.StatusContext) *AsyncPlugin_Status {
	c_call := _m.On("Status", ctx, tCtx)
	return &AsyncPlugin_Status{Call: c_call}
}

func (_m *AsyncPlugin) OnStatusMatch(matchers ...interface{}) *AsyncPlugin_Status {
	c_call := _m.On("Status", matchers...)
	return &AsyncPlugin_Status{Call: c_call}
}

// Status provides a mock function with given fields: ctx, tCtx
func (_m *AsyncPlugin) Status(ctx context.Context, tCtx webapi.StatusContext) (core.PhaseInfo, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 core.PhaseInfo
	if rf, ok := ret.Get(0).(func(context.Context, webapi.StatusContext) core.PhaseInfo); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, webapi.StatusContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

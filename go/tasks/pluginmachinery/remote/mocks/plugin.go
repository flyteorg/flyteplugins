// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	remote "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/remote"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

type Plugin_Create struct {
	*mock.Call
}

func (_m Plugin_Create) Return(resource interface{}, err error) *Plugin_Create {
	return &Plugin_Create{Call: _m.Call.Return(resource, err)}
}

func (_m *Plugin) OnCreate(ctx context.Context, tCtx remote.TaskExecutionContext) *Plugin_Create {
	c := _m.On("Create", ctx, tCtx)
	return &Plugin_Create{Call: c}
}

func (_m *Plugin) OnCreateMatch(matchers ...interface{}) *Plugin_Create {
	c := _m.On("Create", matchers...)
	return &Plugin_Create{Call: c}
}

// Create provides a mock function with given fields: ctx, tCtx
func (_m *Plugin) Create(ctx context.Context, tCtx remote.TaskExecutionContext) (interface{}, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, remote.TaskExecutionContext) interface{}); ok {
		r0 = rf(ctx, tCtx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, remote.TaskExecutionContext) error); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Plugin_Delete struct {
	*mock.Call
}

func (_m Plugin_Delete) Return(_a0 error) *Plugin_Delete {
	return &Plugin_Delete{Call: _m.Call.Return(_a0)}
}

func (_m *Plugin) OnDelete(ctx context.Context, cached interface{}) *Plugin_Delete {
	c := _m.On("Delete", ctx, cached)
	return &Plugin_Delete{Call: c}
}

func (_m *Plugin) OnDeleteMatch(matchers ...interface{}) *Plugin_Delete {
	c := _m.On("Delete", matchers...)
	return &Plugin_Delete{Call: c}
}

// Delete provides a mock function with given fields: ctx, cached
func (_m *Plugin) Delete(ctx context.Context, cached interface{}) error {
	ret := _m.Called(ctx, cached)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, cached)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Plugin_Get struct {
	*mock.Call
}

func (_m Plugin_Get) Return(latest interface{}, err error) *Plugin_Get {
	return &Plugin_Get{Call: _m.Call.Return(latest, err)}
}

func (_m *Plugin) OnGet(ctx context.Context, cached interface{}) *Plugin_Get {
	c := _m.On("Get", ctx, cached)
	return &Plugin_Get{Call: c}
}

func (_m *Plugin) OnGetMatch(matchers ...interface{}) *Plugin_Get {
	c := _m.On("Get", matchers...)
	return &Plugin_Get{Call: c}
}

// Get provides a mock function with given fields: ctx, cached
func (_m *Plugin) Get(ctx context.Context, cached interface{}) (interface{}, error) {
	ret := _m.Called(ctx, cached)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, cached)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, cached)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Plugin_GetPluginProperties struct {
	*mock.Call
}

func (_m Plugin_GetPluginProperties) Return(_a0 remote.PluginProperties) *Plugin_GetPluginProperties {
	return &Plugin_GetPluginProperties{Call: _m.Call.Return(_a0)}
}

func (_m *Plugin) OnGetPluginProperties() *Plugin_GetPluginProperties {
	c := _m.On("GetPluginProperties")
	return &Plugin_GetPluginProperties{Call: c}
}

func (_m *Plugin) OnGetPluginPropertiesMatch(matchers ...interface{}) *Plugin_GetPluginProperties {
	c := _m.On("GetPluginProperties", matchers...)
	return &Plugin_GetPluginProperties{Call: c}
}

// GetPluginProperties provides a mock function with given fields:
func (_m *Plugin) GetPluginProperties() remote.PluginProperties {
	ret := _m.Called()

	var r0 remote.PluginProperties
	if rf, ok := ret.Get(0).(func() remote.PluginProperties); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(remote.PluginProperties)
	}

	return r0
}

type Plugin_ResourceRequirements struct {
	*mock.Call
}

func (_m Plugin_ResourceRequirements) Return(namespace core.ResourceNamespace, constraints core.ResourceConstraintsSpec, err error) *Plugin_ResourceRequirements {
	return &Plugin_ResourceRequirements{Call: _m.Call.Return(namespace, constraints, err)}
}

func (_m *Plugin) OnResourceRequirements(ctx context.Context, tCtx remote.TaskExecutionContext) *Plugin_ResourceRequirements {
	c := _m.On("ResourceRequirements", ctx, tCtx)
	return &Plugin_ResourceRequirements{Call: c}
}

func (_m *Plugin) OnResourceRequirementsMatch(matchers ...interface{}) *Plugin_ResourceRequirements {
	c := _m.On("ResourceRequirements", matchers...)
	return &Plugin_ResourceRequirements{Call: c}
}

// ResourceRequirements provides a mock function with given fields: ctx, tCtx
func (_m *Plugin) ResourceRequirements(ctx context.Context, tCtx remote.TaskExecutionContext) (core.ResourceNamespace, core.ResourceConstraintsSpec, error) {
	ret := _m.Called(ctx, tCtx)

	var r0 core.ResourceNamespace
	if rf, ok := ret.Get(0).(func(context.Context, remote.TaskExecutionContext) core.ResourceNamespace); ok {
		r0 = rf(ctx, tCtx)
	} else {
		r0 = ret.Get(0).(core.ResourceNamespace)
	}

	var r1 core.ResourceConstraintsSpec
	if rf, ok := ret.Get(1).(func(context.Context, remote.TaskExecutionContext) core.ResourceConstraintsSpec); ok {
		r1 = rf(ctx, tCtx)
	} else {
		r1 = ret.Get(1).(core.ResourceConstraintsSpec)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, remote.TaskExecutionContext) error); ok {
		r2 = rf(ctx, tCtx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type Plugin_Status struct {
	*mock.Call
}

func (_m Plugin_Status) Return(phase core.PhaseInfo, err error) *Plugin_Status {
	return &Plugin_Status{Call: _m.Call.Return(phase, err)}
}

func (_m *Plugin) OnStatus(ctx context.Context, resource interface{}) *Plugin_Status {
	c := _m.On("Status", ctx, resource)
	return &Plugin_Status{Call: c}
}

func (_m *Plugin) OnStatusMatch(matchers ...interface{}) *Plugin_Status {
	c := _m.On("Status", matchers...)
	return &Plugin_Status{Call: c}
}

// Status provides a mock function with given fields: ctx, resource
func (_m *Plugin) Status(ctx context.Context, resource interface{}) (core.PhaseInfo, error) {
	ret := _m.Called(ctx, resource)

	var r0 core.PhaseInfo
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) core.PhaseInfo); ok {
		r0 = rf(ctx, resource)
	} else {
		r0 = ret.Get(0).(core.PhaseInfo)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// TaskOverrides is an autogenerated mock type for the TaskOverrides type
type TaskOverrides struct {
	mock.Mock
}

type TaskOverrides_GetConfig struct {
	*mock.Call
}

func (_m TaskOverrides_GetConfig) Return(_a0 *v1.ConfigMap) *TaskOverrides_GetConfig {
	return &TaskOverrides_GetConfig{Call: _m.Call.Return(_a0)}
}

func (_m *TaskOverrides) OnGetConfig() *TaskOverrides_GetConfig {
	c_call := _m.On("GetConfig")
	return &TaskOverrides_GetConfig{Call: c_call}
}

func (_m *TaskOverrides) OnGetConfigMatch(matchers ...interface{}) *TaskOverrides_GetConfig {
	c_call := _m.On("GetConfig", matchers...)
	return &TaskOverrides_GetConfig{Call: c_call}
}

// GetConfig provides a mock function with given fields:
func (_m *TaskOverrides) GetConfig() *v1.ConfigMap {
	ret := _m.Called()

	var r0 *v1.ConfigMap
	if rf, ok := ret.Get(0).(func() *v1.ConfigMap); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ConfigMap)
		}
	}

	return r0
}

type TaskOverrides_GetResources struct {
	*mock.Call
}

func (_m TaskOverrides_GetResources) Return(_a0 *v1.ResourceRequirements) *TaskOverrides_GetResources {
	return &TaskOverrides_GetResources{Call: _m.Call.Return(_a0)}
}

func (_m *TaskOverrides) OnGetResources() *TaskOverrides_GetResources {
	c_call := _m.On("GetResources")
	return &TaskOverrides_GetResources{Call: c_call}
}

func (_m *TaskOverrides) OnGetResourcesMatch(matchers ...interface{}) *TaskOverrides_GetResources {
	c_call := _m.On("GetResources", matchers...)
	return &TaskOverrides_GetResources{Call: c_call}
}

// GetResources provides a mock function with given fields:
func (_m *TaskOverrides) GetResources() *v1.ResourceRequirements {
	ret := _m.Called()

	var r0 *v1.ResourceRequirements
	if rf, ok := ret.Get(0).(func() *v1.ResourceRequirements); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ResourceRequirements)
		}
	}

	return r0
}

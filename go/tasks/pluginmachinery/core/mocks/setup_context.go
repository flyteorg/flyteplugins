// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	core "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/core"
	mock "github.com/stretchr/testify/mock"

	promutils "github.com/flyteorg/flytestdlib/promutils"
)

// SetupContext is an autogenerated mock type for the SetupContext type
type SetupContext struct {
	mock.Mock
}

type SetupContext_EnqueueOwner struct {
	*mock.Call
}

func (_m SetupContext_EnqueueOwner) Return(_a0 core.EnqueueOwner) *SetupContext_EnqueueOwner {
	return &SetupContext_EnqueueOwner{Call: _m.Call.Return(_a0)}
}

func (_m *SetupContext) OnEnqueueOwner() *SetupContext_EnqueueOwner {
	c_call := _m.On("EnqueueOwner")
	return &SetupContext_EnqueueOwner{Call: c_call}
}

func (_m *SetupContext) OnEnqueueOwnerMatch(matchers ...interface{}) *SetupContext_EnqueueOwner {
	c_call := _m.On("EnqueueOwner", matchers...)
	return &SetupContext_EnqueueOwner{Call: c_call}
}

// EnqueueOwner provides a mock function with given fields:
func (_m *SetupContext) EnqueueOwner() core.EnqueueOwner {
	ret := _m.Called()

	var r0 core.EnqueueOwner
	if rf, ok := ret.Get(0).(func() core.EnqueueOwner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.EnqueueOwner)
		}
	}

	return r0
}

type SetupContext_KubeClient struct {
	*mock.Call
}

func (_m SetupContext_KubeClient) Return(_a0 core.KubeClient) *SetupContext_KubeClient {
	return &SetupContext_KubeClient{Call: _m.Call.Return(_a0)}
}

func (_m *SetupContext) OnKubeClient() *SetupContext_KubeClient {
	c_call := _m.On("KubeClient")
	return &SetupContext_KubeClient{Call: c_call}
}

func (_m *SetupContext) OnKubeClientMatch(matchers ...interface{}) *SetupContext_KubeClient {
	c_call := _m.On("KubeClient", matchers...)
	return &SetupContext_KubeClient{Call: c_call}
}

// KubeClient provides a mock function with given fields:
func (_m *SetupContext) KubeClient() core.KubeClient {
	ret := _m.Called()

	var r0 core.KubeClient
	if rf, ok := ret.Get(0).(func() core.KubeClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.KubeClient)
		}
	}

	return r0
}

type SetupContext_MetricsScope struct {
	*mock.Call
}

func (_m SetupContext_MetricsScope) Return(_a0 promutils.Scope) *SetupContext_MetricsScope {
	return &SetupContext_MetricsScope{Call: _m.Call.Return(_a0)}
}

func (_m *SetupContext) OnMetricsScope() *SetupContext_MetricsScope {
	c_call := _m.On("MetricsScope")
	return &SetupContext_MetricsScope{Call: c_call}
}

func (_m *SetupContext) OnMetricsScopeMatch(matchers ...interface{}) *SetupContext_MetricsScope {
	c_call := _m.On("MetricsScope", matchers...)
	return &SetupContext_MetricsScope{Call: c_call}
}

// MetricsScope provides a mock function with given fields:
func (_m *SetupContext) MetricsScope() promutils.Scope {
	ret := _m.Called()

	var r0 promutils.Scope
	if rf, ok := ret.Get(0).(func() promutils.Scope); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(promutils.Scope)
		}
	}

	return r0
}

type SetupContext_OwnerKind struct {
	*mock.Call
}

func (_m SetupContext_OwnerKind) Return(_a0 string) *SetupContext_OwnerKind {
	return &SetupContext_OwnerKind{Call: _m.Call.Return(_a0)}
}

func (_m *SetupContext) OnOwnerKind() *SetupContext_OwnerKind {
	c_call := _m.On("OwnerKind")
	return &SetupContext_OwnerKind{Call: c_call}
}

func (_m *SetupContext) OnOwnerKindMatch(matchers ...interface{}) *SetupContext_OwnerKind {
	c_call := _m.On("OwnerKind", matchers...)
	return &SetupContext_OwnerKind{Call: c_call}
}

// OwnerKind provides a mock function with given fields:
func (_m *SetupContext) OwnerKind() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type SetupContext_ResourceRegistrar struct {
	*mock.Call
}

func (_m SetupContext_ResourceRegistrar) Return(_a0 core.ResourceRegistrar) *SetupContext_ResourceRegistrar {
	return &SetupContext_ResourceRegistrar{Call: _m.Call.Return(_a0)}
}

func (_m *SetupContext) OnResourceRegistrar() *SetupContext_ResourceRegistrar {
	c_call := _m.On("ResourceRegistrar")
	return &SetupContext_ResourceRegistrar{Call: c_call}
}

func (_m *SetupContext) OnResourceRegistrarMatch(matchers ...interface{}) *SetupContext_ResourceRegistrar {
	c_call := _m.On("ResourceRegistrar", matchers...)
	return &SetupContext_ResourceRegistrar{Call: c_call}
}

// ResourceRegistrar provides a mock function with given fields:
func (_m *SetupContext) ResourceRegistrar() core.ResourceRegistrar {
	ret := _m.Called()

	var r0 core.ResourceRegistrar
	if rf, ok := ret.Get(0).(func() core.ResourceRegistrar); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.ResourceRegistrar)
		}
	}

	return r0
}

type SetupContext_SecretManager struct {
	*mock.Call
}

func (_m SetupContext_SecretManager) Return(_a0 core.SecretManager) *SetupContext_SecretManager {
	return &SetupContext_SecretManager{Call: _m.Call.Return(_a0)}
}

func (_m *SetupContext) OnSecretManager() *SetupContext_SecretManager {
	c_call := _m.On("SecretManager")
	return &SetupContext_SecretManager{Call: c_call}
}

func (_m *SetupContext) OnSecretManagerMatch(matchers ...interface{}) *SetupContext_SecretManager {
	c_call := _m.On("SecretManager", matchers...)
	return &SetupContext_SecretManager{Call: c_call}
}

// SecretManager provides a mock function with given fields:
func (_m *SetupContext) SecretManager() core.SecretManager {
	ret := _m.Called()

	var r0 core.SecretManager
	if rf, ok := ret.Get(0).(func() core.SecretManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.SecretManager)
		}
	}

	return r0
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import catalog "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/catalog"
import context "context"
import core "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"
import io "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/io"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, key
func (_m *Client) Get(ctx context.Context, key catalog.Key) (*core.LiteralMap, error) {
	ret := _m.Called(ctx, key)

	var r0 *core.LiteralMap
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) *core.LiteralMap); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.LiteralMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, key, reader, metadata
func (_m *Client) Put(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) error {
	ret := _m.Called(ctx, key, reader, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) error); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import catalog "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/catalog"
import context "context"
import io "github.com/lyft/flyteplugins/go/tasks/pluginmachinery/io"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Get struct {
	*mock.Call
}

func (_m Client_Get) Return(_a0 io.OutputReader, _a1 error) *Client_Get {
	return &Client_Get{Call: _m.Call.Return(_a0, _a1)}
}

func (_m *Client) OnGet(ctx context.Context, key catalog.Key) *Client_Get {
	c := _m.On("Get", ctx, key)
	return &Client_Get{Call: c}
}

func (_m *Client) OnGetMatch(matchers ...interface{}) *Client_Get {
	c := _m.On("Get", matchers...)
	return &Client_Get{Call: c}
}

// Get provides a mock function with given fields: ctx, key
func (_m *Client) Get(ctx context.Context, key catalog.Key) (io.OutputReader, error) {
	ret := _m.Called(ctx, key)

	var r0 io.OutputReader
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key) io.OutputReader); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.OutputReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, catalog.Key) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type Client_Put struct {
	*mock.Call
}

func (_m Client_Put) Return(_a0 error) *Client_Put {
	return &Client_Put{Call: _m.Call.Return(_a0)}
}

func (_m *Client) OnPut(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) *Client_Put {
	c := _m.On("Put", ctx, key, reader, metadata)
	return &Client_Put{Call: c}
}

func (_m *Client) OnPutMatch(matchers ...interface{}) *Client_Put {
	c := _m.On("Put", matchers...)
	return &Client_Put{Call: c}
}

// Put provides a mock function with given fields: ctx, key, reader, metadata
func (_m *Client) Put(ctx context.Context, key catalog.Key, reader io.OutputReader, metadata catalog.Metadata) error {
	ret := _m.Called(ctx, key, reader, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, catalog.Key, io.OutputReader, catalog.Metadata) error); ok {
		r0 = rf(ctx, key, reader, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

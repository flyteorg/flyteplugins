// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	catalog "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/catalog"
	mock "github.com/stretchr/testify/mock"
)

// Future is an autogenerated mock type for the Future type
type Future struct {
	mock.Mock
}

type Future_GetResponseError struct {
	*mock.Call
}

func (_m Future_GetResponseError) Return(_a0 error) *Future_GetResponseError {
	return &Future_GetResponseError{Call: _m.Call.Return(_a0)}
}

func (_m *Future) OnGetResponseError() *Future_GetResponseError {
	c_call := _m.On("GetResponseError")
	return &Future_GetResponseError{Call: c_call}
}

func (_m *Future) OnGetResponseErrorMatch(matchers ...interface{}) *Future_GetResponseError {
	c_call := _m.On("GetResponseError", matchers...)
	return &Future_GetResponseError{Call: c_call}
}

// GetResponseError provides a mock function with given fields:
func (_m *Future) GetResponseError() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type Future_GetResponseStatus struct {
	*mock.Call
}

func (_m Future_GetResponseStatus) Return(_a0 catalog.ResponseStatus) *Future_GetResponseStatus {
	return &Future_GetResponseStatus{Call: _m.Call.Return(_a0)}
}

func (_m *Future) OnGetResponseStatus() *Future_GetResponseStatus {
	c_call := _m.On("GetResponseStatus")
	return &Future_GetResponseStatus{Call: c_call}
}

func (_m *Future) OnGetResponseStatusMatch(matchers ...interface{}) *Future_GetResponseStatus {
	c_call := _m.On("GetResponseStatus", matchers...)
	return &Future_GetResponseStatus{Call: c_call}
}

// GetResponseStatus provides a mock function with given fields:
func (_m *Future) GetResponseStatus() catalog.ResponseStatus {
	ret := _m.Called()

	var r0 catalog.ResponseStatus
	if rf, ok := ret.Get(0).(func() catalog.ResponseStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(catalog.ResponseStatus)
	}

	return r0
}

// OnReady provides a mock function with given fields: handler
func (_m *Future) OnReady(handler catalog.ReadyHandler) {
	_m.Called(handler)
}

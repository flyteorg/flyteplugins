// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import core "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"

import mock "github.com/stretchr/testify/mock"
import storage "github.com/lyft/flytestdlib/storage"

// InputReader is an autogenerated mock type for the InputReader type
type InputReader struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *InputReader) Get(ctx context.Context) (*core.LiteralMap, error) {
	ret := _m.Called(ctx)

	var r0 *core.LiteralMap
	if rf, ok := ret.Get(0).(func(context.Context) *core.LiteralMap); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.LiteralMap)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInputPath provides a mock function with given fields:
func (_m *InputReader) GetInputPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// GetInputPrefixPath provides a mock function with given fields:
func (_m *InputReader) GetInputPrefixPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

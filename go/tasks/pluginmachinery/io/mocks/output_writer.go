// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	context "context"

	io "github.com/flyteorg/flyteplugins/go/tasks/pluginmachinery/io"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/flyteorg/flytestdlib/storage"
)

// OutputWriter is an autogenerated mock type for the OutputWriter type
type OutputWriter struct {
	mock.Mock
}

type OutputWriter_GetCheckpointPrefix struct {
	*mock.Call
}

func (_m OutputWriter_GetCheckpointPrefix) Return(_a0 storage.DataReference) *OutputWriter_GetCheckpointPrefix {
	return &OutputWriter_GetCheckpointPrefix{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnGetCheckpointPrefix() *OutputWriter_GetCheckpointPrefix {
	c := _m.On("GetCheckpointPrefix")
	return &OutputWriter_GetCheckpointPrefix{Call: c}
}

func (_m *OutputWriter) OnGetCheckpointPrefixMatch(matchers ...interface{}) *OutputWriter_GetCheckpointPrefix {
	c := _m.On("GetCheckpointPrefix", matchers...)
	return &OutputWriter_GetCheckpointPrefix{Call: c}
}

// GetCheckpointPrefix provides a mock function with given fields:
func (_m *OutputWriter) GetCheckpointPrefix() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type OutputWriter_GetErrorPath struct {
	*mock.Call
}

func (_m OutputWriter_GetErrorPath) Return(_a0 storage.DataReference) *OutputWriter_GetErrorPath {
	return &OutputWriter_GetErrorPath{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnGetErrorPath() *OutputWriter_GetErrorPath {
	c := _m.On("GetErrorPath")
	return &OutputWriter_GetErrorPath{Call: c}
}

func (_m *OutputWriter) OnGetErrorPathMatch(matchers ...interface{}) *OutputWriter_GetErrorPath {
	c := _m.On("GetErrorPath", matchers...)
	return &OutputWriter_GetErrorPath{Call: c}
}

// GetErrorPath provides a mock function with given fields:
func (_m *OutputWriter) GetErrorPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type OutputWriter_GetOutputPath struct {
	*mock.Call
}

func (_m OutputWriter_GetOutputPath) Return(_a0 storage.DataReference) *OutputWriter_GetOutputPath {
	return &OutputWriter_GetOutputPath{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnGetOutputPath() *OutputWriter_GetOutputPath {
	c := _m.On("GetOutputPath")
	return &OutputWriter_GetOutputPath{Call: c}
}

func (_m *OutputWriter) OnGetOutputPathMatch(matchers ...interface{}) *OutputWriter_GetOutputPath {
	c := _m.On("GetOutputPath", matchers...)
	return &OutputWriter_GetOutputPath{Call: c}
}

// GetOutputPath provides a mock function with given fields:
func (_m *OutputWriter) GetOutputPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type OutputWriter_GetOutputPrefixPath struct {
	*mock.Call
}

func (_m OutputWriter_GetOutputPrefixPath) Return(_a0 storage.DataReference) *OutputWriter_GetOutputPrefixPath {
	return &OutputWriter_GetOutputPrefixPath{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnGetOutputPrefixPath() *OutputWriter_GetOutputPrefixPath {
	c := _m.On("GetOutputPrefixPath")
	return &OutputWriter_GetOutputPrefixPath{Call: c}
}

func (_m *OutputWriter) OnGetOutputPrefixPathMatch(matchers ...interface{}) *OutputWriter_GetOutputPrefixPath {
	c := _m.On("GetOutputPrefixPath", matchers...)
	return &OutputWriter_GetOutputPrefixPath{Call: c}
}

// GetOutputPrefixPath provides a mock function with given fields:
func (_m *OutputWriter) GetOutputPrefixPath() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type OutputWriter_GetPreviousCheckpointsPrefix struct {
	*mock.Call
}

func (_m OutputWriter_GetPreviousCheckpointsPrefix) Return(_a0 storage.DataReference) *OutputWriter_GetPreviousCheckpointsPrefix {
	return &OutputWriter_GetPreviousCheckpointsPrefix{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnGetPreviousCheckpointsPrefix() *OutputWriter_GetPreviousCheckpointsPrefix {
	c := _m.On("GetPreviousCheckpointsPrefix")
	return &OutputWriter_GetPreviousCheckpointsPrefix{Call: c}
}

func (_m *OutputWriter) OnGetPreviousCheckpointsPrefixMatch(matchers ...interface{}) *OutputWriter_GetPreviousCheckpointsPrefix {
	c := _m.On("GetPreviousCheckpointsPrefix", matchers...)
	return &OutputWriter_GetPreviousCheckpointsPrefix{Call: c}
}

// GetPreviousCheckpointsPrefix provides a mock function with given fields:
func (_m *OutputWriter) GetPreviousCheckpointsPrefix() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type OutputWriter_GetRawOutputPrefix struct {
	*mock.Call
}

func (_m OutputWriter_GetRawOutputPrefix) Return(_a0 storage.DataReference) *OutputWriter_GetRawOutputPrefix {
	return &OutputWriter_GetRawOutputPrefix{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnGetRawOutputPrefix() *OutputWriter_GetRawOutputPrefix {
	c := _m.On("GetRawOutputPrefix")
	return &OutputWriter_GetRawOutputPrefix{Call: c}
}

func (_m *OutputWriter) OnGetRawOutputPrefixMatch(matchers ...interface{}) *OutputWriter_GetRawOutputPrefix {
	c := _m.On("GetRawOutputPrefix", matchers...)
	return &OutputWriter_GetRawOutputPrefix{Call: c}
}

// GetRawOutputPrefix provides a mock function with given fields:
func (_m *OutputWriter) GetRawOutputPrefix() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

type OutputWriter_Put struct {
	*mock.Call
}

func (_m OutputWriter_Put) Return(_a0 error) *OutputWriter_Put {
	return &OutputWriter_Put{Call: _m.Call.Return(_a0)}
}

func (_m *OutputWriter) OnPut(ctx context.Context, reader io.OutputReader) *OutputWriter_Put {
	c := _m.On("Put", ctx, reader)
	return &OutputWriter_Put{Call: c}
}

func (_m *OutputWriter) OnPutMatch(matchers ...interface{}) *OutputWriter_Put {
	c := _m.On("Put", matchers...)
	return &OutputWriter_Put{Call: c}
}

// Put provides a mock function with given fields: ctx, reader
func (_m *OutputWriter) Put(ctx context.Context, reader io.OutputReader) error {
	ret := _m.Called(ctx, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.OutputReader) error); ok {
		r0 = rf(ctx, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

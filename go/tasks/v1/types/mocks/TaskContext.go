// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import pkgtypes "k8s.io/apimachinery/pkg/types"
import storage "github.com/lyft/flytestdlib/storage"
import types "github.com/lyft/flyteplugins/go/tasks/v1/types"
import v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

// TaskContext is an autogenerated mock type for the TaskContext type
type TaskContext struct {
	mock.Mock
}

// GetAnnotations provides a mock function with given fields:
func (_m *TaskContext) GetAnnotations() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetCustomState provides a mock function with given fields:
func (_m *TaskContext) GetCustomState() map[string]interface{} {
	ret := _m.Called()

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// GetDataDir provides a mock function with given fields:
func (_m *TaskContext) GetDataDir() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// GetErrorFile provides a mock function with given fields:
func (_m *TaskContext) GetErrorFile() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// GetInputsFile provides a mock function with given fields:
func (_m *TaskContext) GetInputsFile() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// GetK8sServiceAccount provides a mock function with given fields:
func (_m *TaskContext) GetK8sServiceAccount() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLabels provides a mock function with given fields:
func (_m *TaskContext) GetLabels() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetNamespace provides a mock function with given fields:
func (_m *TaskContext) GetNamespace() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOutputsFile provides a mock function with given fields:
func (_m *TaskContext) GetOutputsFile() storage.DataReference {
	ret := _m.Called()

	var r0 storage.DataReference
	if rf, ok := ret.Get(0).(func() storage.DataReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storage.DataReference)
	}

	return r0
}

// GetOverrides provides a mock function with given fields:
func (_m *TaskContext) GetOverrides() types.TaskOverrides {
	ret := _m.Called()

	var r0 types.TaskOverrides
	if rf, ok := ret.Get(0).(func() types.TaskOverrides); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TaskOverrides)
		}
	}

	return r0
}

// GetOwnerID provides a mock function with given fields:
func (_m *TaskContext) GetOwnerID() pkgtypes.NamespacedName {
	ret := _m.Called()

	var r0 pkgtypes.NamespacedName
	if rf, ok := ret.Get(0).(func() pkgtypes.NamespacedName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pkgtypes.NamespacedName)
	}

	return r0
}

// GetOwnerReference provides a mock function with given fields:
func (_m *TaskContext) GetOwnerReference() v1.OwnerReference {
	ret := _m.Called()

	var r0 v1.OwnerReference
	if rf, ok := ret.Get(0).(func() v1.OwnerReference); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.OwnerReference)
	}

	return r0
}

// GetPhase provides a mock function with given fields:
func (_m *TaskContext) GetPhase() types.TaskPhase {
	ret := _m.Called()

	var r0 types.TaskPhase
	if rf, ok := ret.Get(0).(func() types.TaskPhase); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.TaskPhase)
	}

	return r0
}

// GetPhaseVersion provides a mock function with given fields:
func (_m *TaskContext) GetPhaseVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetTaskExecutionID provides a mock function with given fields:
func (_m *TaskContext) GetTaskExecutionID() types.TaskExecutionID {
	ret := _m.Called()

	var r0 types.TaskExecutionID
	if rf, ok := ret.Get(0).(func() types.TaskExecutionID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.TaskExecutionID)
		}
	}

	return r0
}

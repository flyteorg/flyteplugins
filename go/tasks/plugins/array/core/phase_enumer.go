// Code generated by "enumer -type=Phase"; DO NOT EDIT.

package core

import (
	"fmt"
)

const _PhaseName = "PhaseStartPhasePreLaunchPhaseLaunchPhaseWaitingForResourcesPhaseCheckingSubTaskExecutionsPhaseAssembleFinalOutputPhaseWriteToDiscoveryPhaseWriteToDiscoveryThenFailPhaseSuccessPhaseAssembleFinalErrorPhaseRetryableFailurePhasePermanentFailure"

var _PhaseIndex = [...]uint8{0, 10, 24, 35, 59, 89, 113, 134, 163, 175, 198, 219, 240}

func (i Phase) String() string {
	if i >= Phase(len(_PhaseIndex)-1) {
		return fmt.Sprintf("Phase(%d)", i)
	}
	return _PhaseName[_PhaseIndex[i]:_PhaseIndex[i+1]]
}

var _PhaseValues = []Phase{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _PhaseNameToValueMap = map[string]Phase{
	_PhaseName[0:10]:    0,
	_PhaseName[10:24]:   1,
	_PhaseName[24:35]:   2,
	_PhaseName[35:59]:   3,
	_PhaseName[59:89]:   4,
	_PhaseName[89:113]:  5,
	_PhaseName[113:134]: 6,
	_PhaseName[134:163]: 7,
	_PhaseName[163:175]: 8,
	_PhaseName[175:198]: 9,
	_PhaseName[198:219]: 10,
	_PhaseName[219:240]: 11,
}

// PhaseString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PhaseString(s string) (Phase, error) {
	if val, ok := _PhaseNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Phase values", s)
}

// PhaseValues returns all values of the enum
func PhaseValues() []Phase {
	return _PhaseValues
}

// IsAPhase returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Phase) IsAPhase() bool {
	for _, v := range _PhaseValues {
		if i == v {
			return true
		}
	}
	return false
}

// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	definition "github.com/flyteorg/flyteplugins/go/tasks/plugins/array/awsbatch/definition"
	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Get struct {
	*mock.Call
}

func (_m Cache_Get) Return(jobDefinition string, found bool) *Cache_Get {
	return &Cache_Get{Call: _m.Call.Return(jobDefinition, found)}
}

func (_m *Cache) OnGet(key definition.CacheKey) *Cache_Get {
	c_call := _m.On("Get", key)
	return &Cache_Get{Call: c_call}
}

func (_m *Cache) OnGetMatch(matchers ...interface{}) *Cache_Get {
	c_call := _m.On("Get", matchers...)
	return &Cache_Get{Call: c_call}
}

// Get provides a mock function with given fields: key
func (_m *Cache) Get(key definition.CacheKey) (string, bool) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(definition.CacheKey) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(definition.CacheKey) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

type Cache_Put struct {
	*mock.Call
}

func (_m Cache_Put) Return(_a0 error) *Cache_Put {
	return &Cache_Put{Call: _m.Call.Return(_a0)}
}

func (_m *Cache) OnPut(key definition.CacheKey, _a1 string) *Cache_Put {
	c_call := _m.On("Put", key, _a1)
	return &Cache_Put{Call: c_call}
}

func (_m *Cache) OnPutMatch(matchers ...interface{}) *Cache_Put {
	c_call := _m.On("Put", matchers...)
	return &Cache_Put{Call: c_call}
}

// Put provides a mock function with given fields: key, _a1
func (_m *Cache) Put(key definition.CacheKey, _a1 string) error {
	ret := _m.Called(key, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(definition.CacheKey, string) error); ok {
		r0 = rf(key, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import batch "github.com/aws/aws-sdk-go/service/batch"
import context "context"
import mock "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetJobDetailsBatch provides a mock function with given fields: ctx, ids
func (_m *Client) GetJobDetailsBatch(ctx context.Context, ids []string) ([]*batch.JobDetail, error) {
	ret := _m.Called(ctx, ids)

	var r0 []*batch.JobDetail
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*batch.JobDetail); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*batch.JobDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegion provides a mock function with given fields:
func (_m *Client) GetRegion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RegisterJobDefinition provides a mock function with given fields: ctx, name, image, role
func (_m *Client) RegisterJobDefinition(ctx context.Context, name string, image string, role string) (string, error) {
	ret := _m.Called(ctx, name, image, role)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, name, image, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, image, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitJob provides a mock function with given fields: ctx, input
func (_m *Client) SubmitJob(ctx context.Context, input *batch.SubmitJobInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *batch.SubmitJobInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *batch.SubmitJobInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateJob provides a mock function with given fields: ctx, jobID, reason
func (_m *Client) TerminateJob(ctx context.Context, jobID string, reason string) error {
	ret := _m.Called(ctx, jobID, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, jobID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
